#!/usr/bin/python3
#

import ion1d
import os
import matplotlib.pyplot as plt
from miscpy import lplot
import numpy as np

exportdir = os.path.abspath('../export')

lplot.set_defaults(font_size=16, legend_font_size=16)

markerbank = [{'ls':'none', 'marker':'o', 'mec':'k', 'mfc':'w'},
        {'ls':'none', 'marker':'s', 'mec':'k', 'mfc':'w'},
        {'ls':'none', 'marker':'^', 'mec':'k', 'mfc':'w'},
        {'ls':'none', 'marker':'d', 'mec':'k', 'mfc':'w'},
        {'ls':'none', 'marker':'<', 'mec':'k', 'mfc':'w'},
        {'ls':'none', 'marker':'>', 'mec':'k', 'mfc':'w'}]

# Each set of plots is generated by manually switching the conditional to True
# This allows the plots to be generated iteratively until their appearance is
# adequate.
if False:

    # For case 2, construct work and torch sheath plots
    ax1,ax2 = lplot.init_xxyy('z','${\eta}$, ${\\nu}$', y2label='$\phi$', label_size=16)

    usecase = os.path.abspath('../case3')
    downsample = 50
    fmt = [ [{'color':'k', 'ls':'-'}, '${\eta}$'],
            [{'color':'k', 'ls':'--'}, '${\\nu}$'],
            [{'color':'k', 'ls':':'}, '${\phi}$']]
    for dataset,mkr in zip(['000', '025', '044'], markerbank):
        p = ion1d.PostIon1D(os.path.join(usecase,'data',dataset))
        ax1.plot(p.z,p.eta,'k')
        ax1.plot(p.z[::downsample], p.eta[::downsample], **mkr)
        ax1.plot(p.z,p.nu,'k--')
        ax1.plot(p.z[::downsample], p.nu[::downsample], **mkr)
        ax2.plot(p.z,p.phi,'k:')
        ax2.plot(p.z[::downsample], p.phi[::downsample], **mkr)
        fmt.append([mkr, '${{\phi}}_a$={:.2f}'.format(p.param.phia)])

    ax1.set_xlim([0,1])
    ax2.set_xlim([0,1])
    ax2.set_ylim([-50,50])

    ax1.figure.savefig(os.path.join(exportdir, 'case2.png'))
    # Remove the phi axes and zoom in on the sheaths
    ax2.remove()

    ax2 = lplot.floating_legend(ax1.figure, loc=(.5,.5), loc_edge='lt', fmt=fmt, vpadding_inches=.1, markerw_inches=.3)
    ax1.set_xlim([0,.06])
    ax1.set_ylim([0,.15])
    ax1.figure.savefig(os.path.join(exportdir, 'tsheath.png'))
    p = ax2.get_position()
    h = p.height
    p.y0 = .7
    p.y1 = p.y0 + h
    ax2.set_position(p)
    ax1.set_xlim([.9,1])
    ax1.set_ylim([0,.1])
    ax1.figure.savefig(os.path.join(exportdir, 'wsheath.png'))

    plt.close('all')


# Produce broad cross-data-set plots
if True:
    ax1 = lplot.init_fig('${\phi}_a$', '$J$', label_size=16)
    ax2 = lplot.init_fig('${\phi}_a$', '${J_1}$', label_size=16)
    ax3 = lplot.init_fig('${\phi}_a$', '$J$', label_size=16)

    downselect = 4

    # Next, assemble IV characteristics
    usecase = ['../case2', '../case3', '../case4', '../case5', '../case6']
    fmt = []
    fmt3 = []
    for mkr,thiscase in zip(markerbank,usecase):
        # Absolute paths please
        datadir = os.path.join(os.path.abspath(thiscase), 'data')
        # Assemble all data
        phia = []
        J = []
        J1 = []
        Fi = []
        Fe = []
        for source in os.listdir(datadir):
            p = ion1d.PostIon1D(os.path.join(datadir,source))
            phia.append(p.param.phia)
            J.append(p.J)
            J1.append(p.J1)
            Fi.append(p.Fi[1])
            Fe.append(p.Fe[1])
        
        phia = np.asarray(phia)
        J = np.asarray(J)
        J1 = np.asarray(J1)
        Fi = np.asarray(Fi)
        Fe = np.asarray(Fe)
        
        ii = np.argsort(phia)
        phia = phia[ii]
        J = J[ii]
        J1 = J1[ii]
        Fi = Fi[ii]
        Fe = Fe[ii]
        
        phia_asym = np.arange(-50,-10,1)
        J1_asym = (p.param.alpha**2 * p.param.tau * p.param.omega**3 / p.param.R)**.25 / np.sqrt(2)
        J1_asym *= 1/np.sqrt(-phia_asym)
        ax2.plot(phia_asym, J1_asym, 'k--')
        
        if p.model is ion1d.FiniteIon1D:
            mkr.update({'mfc':'k'})
            ax1.plot(phia, J, 'k-')
            ax1.plot(phia[::downselect], J[::downselect], **mkr)
            ax2.plot(phia, J1, 'k-')
            ax2.plot(phia[::downselect], J1[::downselect], **mkr)
            
            ax3.plot(phia, Fi, 'k-')
            ax3.plot(phia[::downselect], Fi[::downselect], **mkr)
            ax3.plot(phia, -Fe, 'k--')
            ax3.plot(phia[::downselect], -Fe[::downselect], **mkr)
            
            mkr.update({'ls':'-', 'color':'k'})
            fmt.append([mkr, 'Lifted {:.2f} $L_f$={:.1f} $R$={:.0f}'.format(p.param.z1, p.param.z2-p.param.z1, p.param.R)])

        else:
            ax1.plot(phia, J, 'k-')
            ax1.plot(phia[::downselect], J[::downselect], **mkr)
            ax2.plot(phia, J1, 'k-')
            ax2.plot(phia[::downselect], J1[::downselect], **mkr)
                        
            ax3.plot(phia, Fi, 'k-')
            ax3.plot(phia[::downselect], Fi[::downselect], **mkr)
            ax3.plot(phia, -Fe, 'k--')
            ax3.plot(phia[::downselect], -Fe[::downselect], **mkr)
            
            mkr.update({'ls':'-', 'color':'k'})
            fmt.append([mkr, 'Anchored $L_f$={:.1f} R={:.0f}'.format(p.param.z1, p.param.R)])

    lplot.floating_legend(ax1.figure, loc=(.42,.35), loc_edge='lt', fmt=fmt, vpadding_inches=.10, markerw_inches=.35)
    ax1.figure.savefig(os.path.join(exportdir, 'jphi.png'))

    lplot.floating_legend(ax2.figure, loc=(.58,.75), loc_edge='rb', fmt=fmt, vpadding_inches=.10, markerw_inches=.35)
    ax2.figure.savefig(os.path.join(exportdir, 'j1phi.png'))

    fmt.insert(0, [{'ls':'-','color':'k'}, 'Ion current (${\eta}$)'])
    fmt.insert(1, [{'ls':'--','color':'k'}, 'Electron current (${\\nu}$)'])
    lplot.floating_legend(ax3.figure, loc=(.55, .45), loc_edge='lt', fmt=fmt, vpadding_inches=.1, markerw_inches=.35)
    ax3.figure.savefig(os.path.join(exportdir, 'fphi.png'))
